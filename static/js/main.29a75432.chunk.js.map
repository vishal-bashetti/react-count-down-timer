{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","days","setDays","hours","setHours","minutes","setMinutes","seconds","setSeconds","isLoading","setIsLoading","countdown","timediff","Date","getTime","timedays","Math","floor","timehours","timeminutes","timeseconds","useEffect","setInterval","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMA0EeA,EAxEH,WACV,MAAwBC,mBAAS,CAAC,KAAlC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,CAAC,IAApC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BJ,mBAAS,CAAC,IAAxC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA8BN,mBAAS,CAAC,IAAxC,mBAAOO,EAAP,KAAgBC,EAAhB,KACA,EAAkCR,oBAAS,GAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KAEMC,EAAY,WAChB,IAGMC,EAHU,IAAIC,KAAK,6BAA6BC,WACxC,IAAID,MAAOC,UAKnBT,EAAUE,IACVJ,EAAQE,KACRJ,EAAOE,MAETY,EAAWC,KAAKC,MAAML,EAAWX,GACjCiB,EAAYF,KAAKC,MAAOL,EAAWX,EAAQE,GAC3CgB,EAAcH,KAAKC,MAAOL,EAAWT,EAASE,GAC9Ce,EAAcJ,KAAKC,MAAOL,EAAWP,EARzB,KAWhBa,EAAYA,EAAY,GAAK,IAAMA,EAAYA,EAC/CC,EAAcA,EAAc,GAAK,IAAMA,EAAcA,EACrDC,EAAcA,EAAc,GAAK,IAAMA,EAAcA,EACrDlB,EAJAa,EAAWA,EAAW,GAAK,IAAMA,EAAWA,GAK5CX,EAASc,GACTZ,EAAWa,GACXX,EAAWY,GACXV,GAAa,IAOf,OAJAW,qBAAU,WACRC,YAAYX,EAAW,QAIvB,mCACGF,EACC,qBAAKc,UAAU,UAAf,SACE,qBAAKA,UAAU,cAGjB,0BAASA,UAAU,YAAnB,UACE,wDACA,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,MAAf,UACE,4BAAItB,IACJ,yCAEF,sBAAKsB,UAAU,MAAf,UACE,4BAAIpB,IACJ,0CAEF,sBAAKoB,UAAU,MAAf,UACE,4BAAIlB,IACJ,4CAEF,sBAAKkB,UAAU,MAAf,UACE,4BAAIhB,IACJ,+CAGJ,0DCvDKiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.29a75432.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst App = () => {\n  const [days, setDays] = useState([10]);\n  const [hours, setHours] = useState([0]);\n  const [minutes, setMinutes] = useState([0]);\n  const [seconds, setSeconds] = useState([0]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const countdown = () => {\n    const endDate = new Date(\"January 01, 2022 00:03:00\").getTime();\n    const today = new Date().getTime();\n\n    const timediff = endDate - today;\n\n    const seconds = 1000;\n    const minutes = seconds * 60;\n    const hours = minutes * 60;\n    const days = hours * 24;\n\n    let timedays = Math.floor(timediff / days);\n    let timehours = Math.floor((timediff % days) / hours);\n    let timeminutes = Math.floor((timediff % hours) / minutes);\n    let timeseconds = Math.floor((timediff % minutes) / seconds);\n\n    timedays = timedays < 10 ? \"0\" + timedays : timedays;\n    timehours = timehours < 10 ? \"0\" + timehours : timehours;\n    timeminutes = timeminutes < 10 ? \"0\" + timeminutes : timeminutes;\n    timeseconds = timeseconds < 10 ? \"0\" + timeseconds : timeseconds;\n    setDays(timedays);\n    setHours(timehours);\n    setMinutes(timeminutes);\n    setSeconds(timeseconds);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    setInterval(countdown, 1000);\n  });\n\n  return (\n    <>\n      {isLoading ? (\n        <div className=\"loading\">\n          <div className=\"spinner\"></div>\n        </div>\n      ) : (\n        <section className=\"container\">\n          <h1>React Count Down Timer</h1>\n          <div className=\"countdown\">\n            <div className=\"art\">\n              <p>{days}</p>\n              <h3>Days</h3>\n            </div>\n            <div className=\"art\">\n              <p>{hours}</p>\n              <h3>Hours</h3>\n            </div>\n            <div className=\"art\">\n              <p>{minutes}</p>\n              <h3>minutes</h3>\n            </div>\n            <div className=\"art\">\n              <p>{seconds}</p>\n              <h3>seconds</h3>\n            </div>\n          </div>\n          <h2>For New Year 2022 </h2>\n        </section>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}